CREATE DATABASE ARSENAL_GYM;

USE ARSENAL_GYM;

-- Tabla ROL
CREATE TABLE ROL(
    ID_ROL NVARCHAR(20) PRIMARY KEY, 
    NOMBRE VARCHAR(50) NOT NULL
);

-- Tabla USUARIOS
CREATE TABLE USUARIOS (
    ID_USUARIO NVARCHAR(20) PRIMARY KEY,
    CONTRASEÑA BLOB NOT NULL,
	FECHA_REGISTRO DATE NOT NULL
);

-- Tabla ROL_USUARIO
CREATE TABLE ROL_USUARIO (
    ID_ROLUSUARIO NVARCHAR(20) PRIMARY KEY,
    ID_ROL NVARCHAR(20),
    ID_USUARIO NVARCHAR(20),
    FOREIGN KEY (ID_ROL) REFERENCES ROL(ID_ROL),
    FOREIGN KEY (ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO)
);

-- Tabla PERSONA
CREATE TABLE PERSONA (
    ID_PERSONA NVARCHAR(20) PRIMARY KEY,
    ID_USUARIO NVARCHAR(29) NOT NULL,
	NOMBRE VARCHAR(100) NOT NULL,
    APELLIDO VARCHAR(100) NOT NULL,
    FECHA_NAC DATE,
    SEXO ENUM('M', 'F'),
	CORREO NVARCHAR(20) NOT NULL,
    TELEFONO VARCHAR(20),
    CURP NVARCHAR(20) NOT NULL,
	FOREIGN KEY (ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO)
);

-- Tabla CLIENTES
CREATE TABLE CLIENTES(
    ID_CLIENTES NVARCHAR(20) PRIMARY KEY, 
    ID_PERSONA NVARCHAR(20) NOT NULL,
    FECHA_REGISTRO DATE NOT NULL,
	FOREIGN KEY (ID_PERSONA) REFERENCES PERSONA(ID_PERSONA)
);

-- Tabla EMPLEADOS
CREATE TABLE EMPLEADOS(
    ID_EMPLEADO NVARCHAR(20) PRIMARY KEY, 
    ID_PERSONA NVARCHAR(20) NOT NULL,
    FECHA_REGISTRO DATE NOT NULL,
    DIRECCION NVARCHAR(100) NOT NULL,
    RFC BLOB NOT NULL,
    NUMERO_SEGURO BLOB NOT NULL,
	FOREIGN KEY (ID_PERSONA) REFERENCES PERSONA(ID_PERSONA)
);

-- Tabla CATEGORIA_PRODUCTOS
CREATE TABLE CATEGORIA_PRODUCTOS (
    ID_CATEGORIA NVARCHAR(20) PRIMARY KEY,
    NOMBRE VARCHAR(100)
);

-- Tabla PRODUCTOS/SERVICIOS
CREATE TABLE PRODUCTOS_SERVICIOS (
    ID_PRODUCTO NVARCHAR(20) PRIMARY KEY,
    NOMBRE VARCHAR(100),
    PRECIO DECIMAL(10, 2),
    STOCK INT NULL,
    ID_CATEGORIA NVARCHAR(20) NOT NULL,
    FOREIGN KEY (ID_CATEGORIA) REFERENCES CATEGORIA_PRODUCTOS(ID_CATEGORIA)
);

-- Tabla ORDEN_VENTA
CREATE TABLE ORDEN_VENTA (
    ID_ORDEN NVARCHAR(20) PRIMARY KEY,
	ID_CLIENTE NVARCHAR(20) NOT NULL,
    ID_EMPLEADO NVARCHAR(20) NOT NULL,
    FECHA_ORDEN DATE,
    FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTES(ID_CLIENTES),
	FOREIGN KEY (ID_EMPLEADO) REFERENCES EMPLEADOS(ID_EMPLEADO)
);

-- Tabla PAGOS
CREATE TABLE PAGOS (
    ID_PAGO NVARCHAR(20) PRIMARY KEY, 
    ID_ORDEN NVARCHAR(20) NOT NULL,
	FORMA_PAGO ENUM('EFECTIVO', 'TARJETA', 'PAYPAL'),
    ESTADO_PAGO ENUM('PENDIENTE', 'LIQUIDADO'),
	FOREIGN KEY (ID_ORDEN) REFERENCES ORDEN_VENTA(ID_ORDEN)
);

-- Tabla DETALLE_VENTA
CREATE TABLE DETALLE_VENTA (
	ID_ORDEN NVARCHAR(20) NOT NULL,
    ID_PRODUCTO NVARCHAR(20) NOT NULL,
    CANTIDAD INT,
    TOTAL DECIMAL (10, 2),
    FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTOS_SERVICIOS(ID_PRODUCTO),
    FOREIGN KEY (ID_ORDEN) REFERENCES ORDEN_VENTA(ID_ORDEN)
);

-- Tabla SOCIOS
CREATE TABLE SOCIOS (
    ID_SOCIO NVARCHAR(20) PRIMARY KEY,
    ID_CLIENTE NVARCHAR(20) NOT NULL,
    MEMBRESIA NVARCHAR(100),
    FECHA_INICIO DATE,
    FECHA_FIN DATE,
    ESTADO_DE_MEMB ENUM('ACTIVO', 'CADUCADO') DEFAULT 'ACTIVO',
    FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTES(ID_CLIENTES)
);

-- Tabla INBODY_CITAS
CREATE TABLE INBODY_CITAS (
    ID_CITA NVARCHAR(20) PRIMARY KEY,
	ID_CLIENTE NVARCHAR(20) NOT NULL,
    FECHA_CITA DATE,
    HORA_CITA TIME,
    PRECIO DECIMAL(10, 2) DEFAULT 250.00,
	FORMA_PAGO ENUM('EFECTIVO', 'TARJETA', 'PAYPAL'),
    ESTADO_CITA ENUM('EN PROGRESO', 'CANCELADO') DEFAULT 'EN PROGRESO',
    FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTES(ID_CLIENTES)
);

-- Tabla INBODY_HISTORIAL
CREATE TABLE INBODY_HISTORIAL (
    ID_HISTORIAL NVARCHAR(20) PRIMARY KEY,
    ID_CITA NVARCHAR(20) NOT NULL,
    PESO DECIMAL(5, 2),
    GRASA_CORPORAL DECIMAL(5, 2),
    MASA_MUSCULAR DECIMAL(5, 2),
    IMC DECIMAL(4, 2),
    FECHA_REGISTRO DATE,
    FOREIGN KEY (ID_CITA) REFERENCES INBODY_CITAS(ID_CITA)
);

-- Tabla CLASES
CREATE TABLE CLASES (
    ID_CLASE NVARCHAR(20) PRIMARY KEY,
    NOMBRE VARCHAR(100),
    HORA_CLASE TIME,
    INSCRITOS INT DEFAULT 0
);
ALTER TABLE CLASES
ADD CONSTRAINT CHK_NOMBRE CHECK (NOMBRE = 'Crossfit');

-- Tabla SOCIOS_CLASES
CREATE TABLE SOCIOS_CLASES (
    ID_SOCIO_CLASE NVARCHAR(20) PRIMARY KEY,
    ID_SOCIO NVARCHAR(20) NOT NULL,
    ID_CLASE NVARCHAR(20) NOT NULL,
    FOREIGN KEY (ID_SOCIO) REFERENCES SOCIOS(ID_SOCIO),
    FOREIGN KEY (ID_CLASE) REFERENCES CLASES(ID_CLASE)
);

-- Tabla ASISTENCIAS
CREATE TABLE ASISTENCIAS (
    ID_ASISTENCIA NVARCHAR(20) PRIMARY KEY,
    ID_SOCIO_CLASE NVARCHAR(20) NOT NULL,
    FECHA DATE,
    CHECK_ASISTENCIA BOOLEAN,
    FOREIGN KEY (ID_SOCIO_CLASE) REFERENCES SOCIOS_CLASES(ID_SOCIO_CLASE)
);



-- DISPARADORES

-- 1 Disparador para adquirir una membresía, actualizando las fechas de la membresía
DELIMITER //
CREATE TRIGGER TRG_DETALLE_VENTA_A_SOCIO
AFTER INSERT ON DETALLE_VENTA
FOR EACH ROW
BEGIN
    DECLARE v_categoria_exist INT;
    DECLARE v_next_id INT;
    DECLARE v_id_socio VARCHAR(10);

    SELECT COUNT(*)
    INTO v_categoria_exist
    FROM PRODUCTOS_SERVICIOS PS
    WHERE PS.ID_PRODUCTO = NEW.ID_PRODUCTO AND PS.ID_CATEGORIA = 'CAT05';

    IF v_categoria_exist > 0 THEN
        SELECT IFNULL(MAX(SUBSTRING(ID_SOCIO, 2) + 1), 1)
        INTO v_next_id
        FROM SOCIOS;

        SET v_id_socio = CONCAT('S', LPAD(v_next_id, 4, '0'));

        INSERT INTO SOCIOS (ID_SOCIO, ID_CLIENTE, MEMBRESIA, FECHA_INICIO, FECHA_FIN)
        SELECT v_id_socio, OV.ID_CLIENTE, PS.NOMBRE, CURDATE(), DATE_ADD(CURDATE(), INTERVAL 1 MONTH)
        FROM ORDEN_VENTA OV
        INNER JOIN PRODUCTOS_SERVICIOS PS ON NEW.ID_PRODUCTO = PS.ID_PRODUCTO
        WHERE OV.ID_ORDEN = NEW.ID_ORDEN;
    END IF;
END;
//
DELIMITER ;

-- 2 Disparador para permitir solo miembros con membresía Crossfit registrarse en clases
DELIMITER //
CREATE TRIGGER TRG_SOCIO_CLASE
BEFORE INSERT ON SOCIOS_CLASES
FOR EACH ROW
BEGIN
    DECLARE TIPO_MEMBRESIA NVARCHAR(100);
    SELECT MEMBRESIA INTO TIPO_MEMBRESIA FROM SOCIOS
    WHERE ID_SOCIO = NEW.ID_SOCIO;
    IF TIPO_MEMBRESIA NOT LIKE '%Crossfit%' THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Solo las membresías de Crossfit pueden registrarse en clases';
    END IF;
END;
//
DELIMITER ;

-- 3 Disparador para actualizar el contador de inscritos en una clase
DELIMITER //
CREATE TRIGGER TRG_ACTUALIZAR_INSCRITOS_CLASE
AFTER INSERT ON SOCIOS_CLASES
FOR EACH ROW
BEGIN
    UPDATE CLASES
    SET INSCRITOS = INSCRITOS + 1
    WHERE ID_CLASE = NEW.ID_CLASE;
END;
//
DELIMITER ;

-- 4 Disparador para restar el contador de inscritos en una clase al eliminar una inscripción
DELIMITER //
CREATE TRIGGER TRG_ACTUALIZAR_INSCRITOS_CLASE_AL_ELIMINAR
AFTER DELETE ON SOCIOS_CLASES
FOR EACH ROW
BEGIN
    UPDATE CLASES
    SET INSCRITOS = INSCRITOS - 1
    WHERE ID_CLASE = OLD.ID_CLASE;
END;
//
DELIMITER ;

-- 5 Disparador para limitar el cupo de una clase a 10 inscritos
DELIMITER //
CREATE TRIGGER TRG_LIMITE_DE_CUPO
BEFORE INSERT ON SOCIOS_CLASES
FOR EACH ROW
BEGIN
    DECLARE INSCRITOS_COUNT INT;
    SELECT INSCRITOS INTO INSCRITOS_COUNT FROM CLASES 
    WHERE ID_CLASE = NEW.ID_CLASE;
    IF INSCRITOS_COUNT >= 10 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'La clase ya ha alcanzado el límite de 10 inscritos';
    END IF;
END;
//
DELIMITER ;

-- 6 Disparador para actualizar el stock de productos después de una venta
DELIMITER //
CREATE TRIGGER TRG_ACTUALIZAR_STOCK
AFTER INSERT ON DETALLE_VENTA
FOR EACH ROW
BEGIN
    UPDATE PRODUCTOS_SERVICIOS
    SET STOCK = STOCK - NEW.CANTIDAD
    WHERE ID_PRODUCTO = NEW.ID_PRODUCTO;
END;
//
DELIMITER ;

-- 7 Disparador para ajustar el precio de citas de Inbody con descuento para socios
DELIMITER //
CREATE TRIGGER TRG_PRECIO_INBODY
BEFORE INSERT ON INBODY_CITAS
FOR EACH ROW
BEGIN
    DECLARE CLIENTE_SOCIO INT;
    DECLARE DESCUENTO DECIMAL(10, 2);

    SELECT COUNT(*) INTO CLIENTE_SOCIO FROM SOCIOS
    WHERE ID_CLIENTE = NEW.ID_CLIENTE;

    IF CLIENTE_SOCIO > 0 THEN
        SET DESCUENTO = NEW.PRECIO * 0.4;
    ELSE
        SET DESCUENTO = 0;
    END IF;

    SET NEW.PRECIO = NEW.PRECIO - DESCUENTO;
END;
//
DELIMITER ;

-- 8 Disparador eliminar socio en clase por faltas, si un socio_clase tiene 3 faltas se borra su registro
DELIMITER //
CREATE PROCEDURE verificarFaltas(
    IN p_id_socio_clase NVARCHAR(20)
)
BEGIN
    DECLARE totalFaltas INT;

    -- Contar las faltas del socio en la clase
    SELECT COUNT(*)
    INTO totalFaltas
    FROM ASISTENCIAS
    WHERE ID_SOCIO_CLASE = p_id_socio_clase AND CHECK_ASISTENCIA = FALSE;

    -- Si acumula 3 faltas, eliminar el registro de SOCIOS_CLASES
    IF totalFaltas >= 3 THEN
        DELETE FROM SOCIOS_CLASES WHERE ID_SOCIO_CLASE = p_id_socio_clase;
    END IF;
END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER trig_verificar_faltas
AFTER INSERT ON ASISTENCIAS
FOR EACH ROW
BEGIN
    CALL verificarFaltas(NEW.ID_SOCIO_CLASE);
END//
DELIMITER ;

-- 9 Disparador para eliminar socios con membresía caducada
DELIMITER //
CREATE TRIGGER ELIMINAR_SOCIO
AFTER UPDATE ON SOCIOS
FOR EACH ROW
BEGIN
    IF NEW.ESTADO_DE_MEMB = 'CADUCADO' THEN
        DELETE FROM SOCIOS WHERE ID_SOCIO = NEW.ID_SOCIO;
    END IF;
END //
DELIMITER ;


-- DATOS

SET @key = 'asdfgh123456';

-- Insertar datos en la tabla ROL
INSERT INTO ROL (ID_ROL, NOMBRE) VALUES
('ROL001', 'CLIENTE'),
('ROL002', 'EMPLEADO');

-- Insertar datos en la tabla USUARIOS con contraseñas encriptadas
INSERT INTO USUARIOS (ID_USUARIO, CONTRASEÑA, FECHA_REGISTRO) VALUES
('C0001', AES_ENCRYPT('password1', @key), '2024-06-30'),
('C0002', AES_ENCRYPT('password2', @key), '2024-06-30'),
('C0003', AES_ENCRYPT('password3', @key), '2024-06-30'),
('C0004', AES_ENCRYPT('password4', @key), '2024-06-30'),
('C0005', AES_ENCRYPT('password5', @key), '2024-06-30'),
('C0006', AES_ENCRYPT('password6', @key), '2024-06-30'),
('C0007', AES_ENCRYPT('password7', @key), '2024-06-30'),
('C0008', AES_ENCRYPT('password8', @key), '2024-06-30'),
('C0009', AES_ENCRYPT('password9', @key), '2024-06-30'),
('C0010', AES_ENCRYPT('password10', @key), '2024-06-30'),
('C0011', AES_ENCRYPT('password11', @key), '2024-06-30');

-- Insertar datos en la tabla ROL_USUARIO
INSERT INTO ROL_USUARIO (ID_ROLUSUARIO, ID_ROL, ID_USUARIO) VALUES
('RU0001', 'ROL002', 'C0001'),
('RU0002', 'ROL002', 'C0002'),
('RU0003', 'ROL001', 'C0003'),
('RU0004', 'ROL001', 'C0004'),
('RU0005', 'ROL001', 'C0005'),
('RU0006', 'ROL001', 'C0006'),
('RU0007', 'ROL001', 'C0007'),
('RU0008', 'ROL001', 'C0008'),
('RU0009', 'ROL001', 'C0009'),
('RU0010', 'ROL001', 'C0010'),
('RU0011', 'ROL001', 'C0011');

-- Insertar datos en la tabla PERSONA
INSERT INTO PERSONA (ID_PERSONA, ID_USUARIO, NOMBRE, APELLIDO, FECHA_NAC, SEXO, CORREO, TELEFONO, CURP) VALUES
('P0001', 'C0001', 'Jonathan Alejandro', 'Rojas Espinoza', '1985-01-15', 'M', 'jonathan@example.com', '555-1234', 'ROEJ850115HNLRJS01'),
('P0002', 'C0002', 'Jesus Alberto', 'Martinez Lopez', '1990-02-20', 'M', 'jesus@example.com', '555-5678', 'MALJ900220HNLRJS02'),
('P0003', 'C0003', 'Maria Fernanda', 'Perez Rodriguez', '1995-03-25', 'F', 'maria@example.com', '555-9012', 'PERM950325HNLRJS03'),
('P0004', 'C0004', 'Carlos Eduardo', 'Ramirez Sanchez', '1988-04-30', 'M', 'carlos@example.com', '555-3456', 'RASJ880430HNLRJS04'),
('P0005', 'C0005', 'Ana Patricia', 'Hernandez Vargas', '1992-05-05', 'F', 'ana@example.com', '555-7890', 'HVAJ920505HNLRJS05'),
('P0006', 'C0006', 'Juan Carlos', 'Gomez Perez', '1987-06-10', 'M', 'juan@example.com', '555-1234', 'GOPJ870610HNLRJS06'),
('P0007', 'C0007', 'Luis Alberto', 'Lopez Martinez', '1993-07-15', 'M', 'luis@example.com', '555-5678', 'LOML930715HNLRJS07'),
('P0008', 'C0008', 'Laura Elena', 'Castro Diaz', '1989-08-20', 'F', 'laura@example.com', '555-9012', 'CADL890820HNLRJS08'),
('P0009', 'C0009', 'Sofia Isabel', 'Morales Garcia', '1991-09-25', 'F', 'sofia@example.com', '555-3456', 'MOGS910925HNLRJS09'),
('P0010', 'C0010', 'Ricardo Antonio', 'Ramos Lopez', '1986-10-30', 'M', 'ricardo@example.com', '555-7890', 'RALR861030HNLRJS10'),
('P0011', 'C0011', 'Elena Maria', 'Vargas Torres', '1994-11-05', 'F', 'elena@example.com', '555-1234', 'VATJ941105HNLRJS11');

-- Insertar datos en la tabla CLIENTES
INSERT INTO CLIENTES (ID_CLIENTES, ID_PERSONA, FECHA_REGISTRO) VALUES
('CL0003', 'P0003', '2024-06-30'),
('CL0004', 'P0004', '2024-06-30'),
('CL0005', 'P0005', '2024-06-30'),
('CL0006', 'P0006', '2024-06-30'),
('CL0007', 'P0007', '2024-06-30'),
('CL0008', 'P0008', '2024-06-30'),
('CL0009', 'P0009', '2024-06-30'),
('CL0010', 'P0010', '2024-06-30'),
('CL0011', 'P0011', '2024-06-30');

-- Insertar datos en la tabla EMPLEADOS
INSERT INTO EMPLEADOS (ID_EMPLEADO, ID_PERSONA, FECHA_REGISTRO, DIRECCION, RFC, NUMERO_SEGURO) VALUES
('E0001', 'P0001', '2024-06-30', '123 Main St', AES_ENCRYPT('ROEJ850115', @key), AES_ENCRYPT('1234567890', @key)),
('E0002', 'P0002', '2024-06-30', '456 Elm St', AES_ENCRYPT('MALJ900220', @key), AES_ENCRYPT('0987654321', @key));

-- Insertar datos en la tabla CATEGORIA_PRODUCTOS
INSERT INTO CATEGORIA_PRODUCTOS(ID_CATEGORIA, NOMBRE) VALUES
('CAT01', 'Proteinas'),
('CAT02', 'Creatinas'),
('CAT03', 'Multi-vitaminicos'),
('CAT04', 'Pre-entreno'),
('CAT05', 'Membresia');

-- Insertar datos en la tabla PRODUCTOS_SERVICIOS
INSERT INTO PRODUCTOS_SERVICIOS(ID_PRODUCTO, NOMBRE, STOCK, PRECIO, ID_CATEGORIA) VALUES
('P0001', 'Aislado de proteína de suero', 100, '999.00', 'CAT01'),
('P0002', 'Mezcla de proteínas Evofusion', 100, '549.00', 'CAT01'),
('P0003', 'Ganador de masa muscular', 100, '1400.00', 'CAT01'),
('P0004', 'Creatina Creapure en polvo', 100, '749.00', 'CAT02'),
('P0005', 'Creatina Monohidratada GNC Pro performance sin sabor', 100, '989.00', 'CAT02'),
('P0006', 'Creatina Elemental Performance', 100, '600.00', 'CAT02'),
('P0007', 'Evovite multivitamina', 100, '640.00', 'CAT03'),
('P0008', 'Aceite Omega', 100, '640.00', 'CAT03'),
('P0009', 'Evogen Liver Longer', 100, '899.00', 'CAT03'),
('P0010', 'EVP Extreme N.O.', 100, '899.00', 'CAT04'),
('P0011', 'EVP-3D Non-Stim', 100, '899.00', 'CAT04'),
('P0012', 'EVP AQ Glicerol liquido', 100, '819.00', 'CAT04'),
('P0013', 'Membresia Gym Mensual', NULL, '700.00', 'CAT05'),
('P0014', 'Membresia Gym Trimestral', NULL, '1800.00', 'CAT05'),
('P0015', 'Membresia Gym Anual', NULL, '7460.00', 'CAT05'),
('P0016', 'Membresia Crossfit Mensual', NULL, '720.00', 'CAT05'),
('P0017', 'Membresia Crossfit Trimestral', NULL, '1920.00', 'CAT05'),
('P0018', 'Membresia Crossfit Anual', NULL, '7550.00', 'CAT05');

-- Insertar datos en la tabla ORDEN_VENTA
INSERT INTO ORDEN_VENTA (ID_ORDEN, ID_CLIENTE, ID_EMPLEADO, FECHA_ORDEN) VALUES
('O0001', 'CL0003', 'E0001', '2024-07-01'),
('O0002', 'CL0004', 'E0002', '2024-07-01');

-- Insertar datos en la tabla PAGOS
INSERT INTO PAGOS (ID_PAGO, ID_ORDEN, FORMA_PAGO, ESTADO_PAGO) VALUES
('PAG0001', 'O0001', 'TARJETA', 'PENDIENTE'),
('PAG0002', 'O0002', 'EFECTIVO', 'LIQUIDADO');

-- Insertar datos en la tabla DETALLE_VENTA
INSERT INTO DETALLE_VENTA (ID_ORDEN, ID_PRODUCTO, CANTIDAD, TOTAL) VALUES
('O0001', 'P0001', 2, 59.98),
('O0002', 'P0002', 1, 19.99);

-- Insertar datos en la tabla SOCIOS
INSERT INTO SOCIOS (ID_SOCIO, ID_CLIENTE, MEMBRESIA, FECHA_INICIO, FECHA_FIN, ESTADO_DE_MEMB) VALUES
('S0001', 'CL0003', 'Mensual', '2024-07-01', '2024-07-31', 'ACTIVO'),
('S0002', 'CL0004', 'Anual', '2024-07-01', '2025-06-30', 'ACTIVO');

-- Insertar datos en la tabla INBODY_CITAS
INSERT INTO INBODY_CITAS (ID_CITA, ID_CLIENTE, FECHA_CITA, HORA_CITA, PRECIO, FORMA_PAGO, ESTADO_CITA) VALUES
('CITA0001', 'CL0005', '2024-07-02', '10:00:00', 250.00, 'EFECTIVO', 'EN PROGRESO'),
('CITA0002', 'CL0006', '2024-07-03', '11:00:00', 250.00, 'TARJETA', 'CANCELADO');

-- Insertar datos en la tabla INBODY_HISTORIAL
INSERT INTO INBODY_HISTORIAL (ID_HISTORIAL, ID_CITA, PESO, GRASA_CORPORAL, MASA_MUSCULAR, IMC, FECHA_REGISTRO) VALUES
('HIST0001', 'CITA0001', 70.5, 15.2, 35.3, 22.1, '2024-07-02');

-- Insertar datos en la tabla CLASES
INSERT INTO CLASES (ID_CLASE, NOMBRE, HORA_CLASE, INSCRITOS) VALUES
('CLASS001', 'Crossfit', '07:00', ''),
('CLASS002', 'Crossfit', '09:00', ''),
('CLASS003', 'Crossfit', '03:00', ''),
('CLASS004', 'Crossfit', '05:00', ''),
('CLASS005', 'Crossfit', '08:00', '');

-- Insertar datos en la tabla SOCIOS_CLASES
INSERT INTO SOCIOS_CLASES (ID_SOCIO_CLASE, ID_SOCIO, ID_CLASE) VALUES
('SC0001', 'S0001', 'CLASS0001'),
('SC0002', 'S0002', 'CLASS0001');

-- Insertar datos en la tabla ASISTENCIAS
INSERT INTO ASISTENCIAS (ID_ASISTENCIA, ID_SOCIO_CLASE, FECHA, CHECK_ASISTENCIA) VALUES
('A0001', 'SC0001', '2024-07-01', TRUE),
('A0002', 'SC0002', '2024-07-02', FALSE);



-- CONSULTAS

-- Consulta 1: Obtener todos los clientes que han realizado una compra de productos/servicios.
SELECT DISTINCT P.NOMBRE, P.APELLIDO
FROM PERSONA P
JOIN CLIENTES C ON P.ID_PERSONA = C.ID_PERSONA
JOIN ORDEN_VENTA OV ON C.ID_CLIENTES = OV.ID_CLIENTE;

-- Consulta 2: Mostrar todas las membresías activas de los socios junto con sus fechas de inicio y fin.
SELECT S.ID_SOCIO, P.NOMBRE, P.APELLIDO, S.MEMBRESIA, S.FECHA_INICIO, S.FECHA_FIN
FROM SOCIOS S
JOIN CLIENTES C ON S.ID_CLIENTE = C.ID_CLIENTES
JOIN PERSONA P ON C.ID_PERSONA = P.ID_PERSONA
WHERE S.ESTADO_DE_MEMB = 'ACTIVO';

-- Consulta 3: Obtener el detalle de ventas con el nombre del producto, cantidad vendida y total por cada orden.
SELECT OV.ID_ORDEN, PS.NOMBRE AS PRODUCTO, DV.CANTIDAD, DV.TOTAL
FROM ORDEN_VENTA OV
JOIN DETALLE_VENTA DV ON OV.ID_ORDEN = DV.ID_ORDEN
JOIN PRODUCTOS_SERVICIOS PS ON DV.ID_PRODUCTO = PS.ID_PRODUCTO;

-- Consulta 4: Mostrar las clases de Crossfit disponibles con el número actual de inscritos.
SELECT C.NOMBRE AS CLASE, C.HORA_CLASE, C.INSCRITOS
FROM CLASES C
WHERE C.NOMBRE = 'Crossfit';

-- Consulta 5: Listar todas las citas de Inbody con su precio actualizado según el descuento aplicado para socios.
SELECT IC.ID_CITA, P.NOMBRE, P.APELLIDO, IC.PRECIO
FROM INBODY_CITAS IC
JOIN CLIENTES C ON IC.ID_CLIENTE = C.ID_CLIENTES
JOIN PERSONA P ON C.ID_PERSONA = P.ID_PERSONA;